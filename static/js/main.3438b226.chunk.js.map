{"version":3,"sources":["redux/employeesReducer.js","components/MainPage/MainPage.jsx","App.js","reportWebVitals.js","redux/store.js","index.js"],"names":["GET_EMPLOYEES","AC","employees","type","payload","initState","employeesReducer","state","action","BirthdayEmployees","props","monthNames","currentDate","Date","i","getMonth","push","shift","activeEmployees","activeEmployeesId","map","item","tempObj","forEach","obj","id","renderMonth","month","index","sortedActivEmployees","monthOfBirthday","Number","dob","slice","firstName","lastName","className","Employee","employee","update","useState","isActive","setIsActive","checkingEmployee","name","value","onChange","checked","EmployeesList","employeesMarkup","element","letter","length","MainPage","dispatch","useDispatch","useSelector","employeesRed","setactiveEmployeesId","updateLocalStorage","storage","activeId","findIndex","splice","useEffect","window","localStorage","setItem","JSON","stringify","axios","get","then","res","data","parse","getItem","sortingEmployees","split","lettersFilter","filter","substring","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","middleware","applyMiddleware","thunk","store","createStore","undefined","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3438b226.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst GET_EMPLOYEES = \"GET_EMPLOYEES\"\n\nconst AC = {\n    getEmployees(employees) {\n        return ({type: GET_EMPLOYEES, payload: employees})\n    },\n};\n\nexport const getEmployees = () => {\n    return (dispatch) => {\n        axios.get('https://yalantis-react-school-api.yalantis.com/api/task0/users')\n            .then(res => {\n                dispatch(AC.getEmployees(res.data))\n            })\n    }\n}\n\nlet initState = {\n    employees: [],\n};\n\nconst employeesReducer = (state = initState, action) => {\n    switch (action.type) {\n        case GET_EMPLOYEES: {\n            return ({...state, employees: action.payload});\n        }\n        default:\n            return state;\n\n    }\n\n}\nexport default employeesReducer;","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { getEmployees } from \"../../redux/employeesReducer\"\r\nimport \"./MainPage.css\"\r\n\r\nconst BirthdayEmployees = (props) => {\r\n    const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n        \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n    let currentDate = new Date();\r\n    for (let i = 0; i < currentDate.getMonth(); i++) {\r\n        monthNames.push(monthNames[0]);\r\n        monthNames.shift();\r\n    }\r\n\r\n    let activeEmployees = [];\r\n    activeEmployees = props.activeEmployeesId.map(item => {\r\n        let tempObj;\r\n        props.employees.forEach(obj => {\r\n            if (obj.id === item) {\r\n                tempObj = obj;\r\n            }\r\n        });\r\n        return tempObj;\r\n    });\r\n\r\n    let renderMonth = monthNames.map((month, index) => {\r\n        let sortedActivEmployees = activeEmployees.map(item => {\r\n            let monthOfBirthday = Number(item.dob.slice(5, 7));\r\n            // console.log(monthOfBirthday)\r\n            if (monthOfBirthday === (index + currentDate.getMonth()) ||\r\n                monthOfBirthday === (index + currentDate.getMonth() - 12)) {\r\n                return (\r\n                    <div key={item.id}>\r\n                        {item.firstName} {item.lastName}\r\n                    </div>\r\n                )\r\n            }\r\n            else return undefined;\r\n        })\r\n\r\n        return (\r\n            <div key={index}>\r\n                <div className=\"mouth\">{month}</div>\r\n                <div>{sortedActivEmployees}</div>\r\n            </div>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className=\"birthday-list\">{renderMonth}</div>\r\n    )\r\n}\r\n\r\nconst Employee = (props) => {\r\n    const { id, firstName, lastName } = props.employee;\r\n    const update = props.update;\r\n    const [isActive, setIsActive] = useState(props.isActive);\r\n\r\n    let checkingEmployee = () => {\r\n        setIsActive(!isActive);\r\n        update(id);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"full-name\">{firstName} {lastName}</div>\r\n            <form className=\"user-item\">\r\n                <input type=\"radio\" name={id} value=\"active\" onChange={checkingEmployee} checked={isActive} />\r\n                <div>active</div>\r\n                <input type=\"radio\" name={id} value=\"non-active\" onChange={checkingEmployee} checked={!isActive} />\r\n                <div>not active</div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst EmployeesList = (props) => {\r\n    let employeesMarkup = props.employees.map(employee => {\r\n        let isActive = false;\r\n        props.activeEmployeesId.forEach(element => {\r\n            if (element === employee.id) {\r\n                isActive = true;\r\n            }\r\n        });\r\n        return (\r\n            <div key={employee.id}>\r\n                <Employee employee={employee} update={props.update} isActive={isActive} />\r\n            </div>\r\n        )\r\n    })\r\n    return (\r\n        <div>\r\n            <div>{props.letter}</div>\r\n            {props.employees.length > 0 ? employeesMarkup : <div className=\"full-name\">No employee</div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst MainPage = () => {\r\n    const dispatch = useDispatch();\r\n    const employees = useSelector((state) => state.employeesRed.employees);\r\n    const [activeEmployeesId, setactiveEmployeesId] = useState([]);\r\n\r\n    const updateLocalStorage = (id) => {\r\n        const storage = [...activeEmployeesId];\r\n        const activeId = storage.findIndex(item => id === item)\r\n        if (activeId >= 0) {\r\n            storage.splice(activeId, 1);\r\n        }\r\n        else {\r\n            storage.push(id);\r\n        }\r\n        setactiveEmployeesId(storage);\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.localStorage.setItem('active-employees', JSON.stringify(activeEmployeesId))\r\n        // console.log(activeEmployeesId)\r\n        // console.log(JSON.parse(window.localStorage.getItem('active-employees')))\r\n    }, [activeEmployeesId])\r\n\r\n    useEffect(() => {\r\n        dispatch(getEmployees());\r\n        setactiveEmployeesId(JSON.parse(window.localStorage.getItem('active-employees')));\r\n        // console.log(JSON.parse(window.localStorage.getItem('active-employees')))\r\n    }, []);\r\n\r\n    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r\n\r\n    let sortingEmployees = alphabet.split(\"\").map((item) => {\r\n        let lettersFilter = employees.filter(name => {\r\n            return name.firstName.substring(0, 1) === item;\r\n        })\r\n        return (\r\n            <div className=\"employee-list-content\" key={item}>\r\n                <EmployeesList employees={lettersFilter} update={updateLocalStorage} activeEmployeesId={activeEmployeesId} letter={item} />\r\n            </div>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className=\"main-wrapper\">\r\n            <div className=\"employee-list\">{sortingEmployees}</div>\r\n            <BirthdayEmployees activeEmployeesId={activeEmployeesId} employees={employees} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MainPage;","import './App.css';\nimport MainPage from \"./components/MainPage\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <MainPage />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport thunk from 'redux-thunk';\n\nimport employeesReducer from \"./employeesReducer\";\n\nconst reducers = combineReducers({\n    employeesRed: employeesReducer,\n});\nconst middleware = applyMiddleware(thunk)\nconst store = createStore(reducers, undefined, middleware);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}